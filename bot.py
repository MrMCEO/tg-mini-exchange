import os
import json
import telebot
from telebot.types import WebAppInfo, MenuButtonWebApp, InlineKeyboardMarkup, InlineKeyboardButton
from logger import Logger

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = Logger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        error_msg = "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        logger.log_error("config_loading", error_msg)
        print(error_msg)
        exit(1)

config = load_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config['BOT_TOKEN'])

@bot.message_handler(commands=['start'])
def start(message):
    try:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ URL
        current_config = load_config()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        markup = InlineKeyboardMarkup()
        webapp_button = InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –±–∏—Ä–∂—É", 
            web_app=WebAppInfo(url=current_config['WEBAPP_URL'])
        )
        markup.add(webapp_button)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        bot.send_message(
            message.chat.id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –£—á–µ–±–Ω—É—é –ë–∏—Ä–∂—É! üìä\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é:",
            reply_markup=markup
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        menu_button = MenuButtonWebApp(
            type="web_app",
            text="–ë–∏—Ä–∂–∞",
            web_app=WebAppInfo(url=current_config['WEBAPP_URL'])
        )
        bot.set_chat_menu_button(
            chat_id=message.chat.id,
            menu_button=menu_button
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.log_user_action(
            message.chat.id, 
            "bot_start", 
            {"username": message.from_user.username}
        )
        
    except Exception as e:
        error_msg = str(e)
        logger.log_error(
            "bot_start", 
            error_msg,
            {"user_id": message.chat.id}
        )
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: True)
def echo(message):
    logger.log_user_action(
        message.chat.id,
        "message_received",
        {
            "text": message.text,
            "username": message.from_user.username
        }
    )
    bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ë–∏—Ä–∂–∞' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")

if __name__ == "__main__":
    if not config['BOT_TOKEN']:
        error_msg = "–û—à–∏–±–∫–∞: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ BOT_TOKEN –≤ —Ñ–∞–π–ª–µ config.json"
        logger.log_error("config_validation", error_msg)
        print(error_msg)
        exit(1)
    
    logger.log_user_action("system", "bot_started", {"token": config['BOT_TOKEN']})
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling()
